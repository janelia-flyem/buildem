--- setup.py_old	2014-07-09 19:03:41.996900059 +0000
+++ setup.py	2014-07-10 20:18:55.653738878 +0000
@@ -7,31 +7,35 @@
 # includes numpy : package numpy.distutils , numpy.get_include()
 # python setup.py build --inplace
 # python setup.py install --prefix=dist, 
-incs = ['.'] + map(lambda x: os.path.join('spams',x),[ 'linalg', 'prox', 'decomp', 'dictLearn']) + [numpy.get_include()] + ['/usr/include/python2.7/']
+incs = ['.'] + map(lambda x: os.path.join('spams',x),[ 'linalg', 'prox', 'decomp', 'dictLearn']) + [numpy.get_include()]
 
 osname = distutils.util.get_platform()
-cc_flags = ['-fPIC', '-fopenmp']
-link_flags = ['-fopenmp', '-s' ]
-libs = ['stdc++', 'blas', 'lapack' ]
+
+buildem_dir = os.environ["BUILDEM_DIR"]
+cc_flags = ['-fPIC', '-fopenmp', '-static-libgfortran', '-Wunused-variable']
+link_flags = ['-fopenmp', '-static-libgfortran']
+
+dynamic_libs = ['stdc++', 'cblas', 'lapack']
+static_libs = ['atlas']
+
 libdirs = []
 
+# What's the point of a standarized build system if we are just going to route around it.
 if osname.startswith("macosx"):
-    cc_flags = ['-fPIC', '-fopenmp','-m32']
-    link_flags = ['-m32', '-framework', 'Python']
+    cc_flags += ["-F" + os.path.join(buildem_dir, "Frameworks")]
+    link_flags = ['-framework', 'Python']
+elif osname.startswith("win"):
+    # Assuming MinGW system.
+    # Don't mess with path as we have ideally set it the right way already.
+    # Don't use R for BLAS as we have built BLAS already.
+    cc_flags += ['-DWIN32']
+    link_flags += ['-mwindows']
+
+# These assume GCC style syntax is allowed. Should work for clang (when they have openmp). Will not work with other compilers.
+dynamic_libs = ["-l" + _ for _ in dynamic_libs]
+static_libs = ["-Wl,-Bstatic"] + ["-l" + _ for _ in static_libs] + ["-Wl,-Bdynamic"]
 
-if osname.startswith("win32"):
-    cc_flags = ['-fPIC', '-fopenmp','-DWIN32']
-    link_flags = ['-fopenmp', '-mwindows']
-    path = os.environ['PATH']
-    os.environ['PATH'] = 'C:/MinGW/bin;' + path
-    libs = ['stdc++', 'Rblas', 'Rlapack' ]
-    libdirs = ['C:/Program Files/R/R-2.15.1/bin/i386']
-
-if osname.startswith("win-amd64"):
-    cc_flags = ['-openmp', '-EHsc', '-DWIN32', '-DCYGWIN', '-DWINDOWS', '-I','C:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/include']
-    link_flags = []
-    libs = [ 'Rblas', 'Rlapack' ]
-    libdirs = ['C:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/lib/amd64','C:/Program Files/R/R-2.15.1/bin/x64']
+libs =  dynamic_libs + static_libs
 
 
 ##path = os.environ['PATH']; print "XX OS %s, path %s" %(osname,path)
@@ -42,7 +46,8 @@
     include_dirs = incs,
     extra_compile_args = ['-DNDEBUG', '-DUSE_BLAS_LIB'] + cc_flags,
     library_dirs = libdirs,
-    libraries = libs,
+    # Want to control the formatting.
+    extra_objects = libs,
     # strip the .so
     extra_link_args = link_flags,
     language = 'c++',
